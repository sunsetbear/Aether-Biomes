buildscript {
    repositories {
        maven {
            name 'Forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            name 'Sponge'
            url 'https://repo.spongepowered.org/maven'
        }
        maven {
            name 'Parchment'
            url 'https://maven.parchmentmc.org'
        }
        maven {
            name 'Gradle'
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
        classpath group: 'io.github.0ffz', name: 'gpr-for-gradle', version: '1.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.+', changing: true
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'io.github.0ffz.github-packages'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

version = '0.0.1-1.19.4'
group = 'com.sunsette.aetherbiomes' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'aetherbiomes'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: project.mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'aetherbiomes'

            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                aetherbiomes {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aetherbiomes'

            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                aetherbiomes {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'aetherbiomes'

            mods {
                aetherbiomes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            args '--mod', "AetherBiomes", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                "AetherBiomes" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    compileOnly "com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}"
//    runtimeOnly fg.deobf("com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")

    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${project.caelus_version}")

//    compileOnly "mezz.jei:jei-${project.mc_version}-common-api:${project.jei_version}"
//    compileOnly "mezz.jei:jei-${project.mc_version}-forge-api:${project.jei_version}"

//    runtimeOnly fg.deobf("io.github.flemmli97:debugutils:${project.mc_version}-${project.debugutils_version}-forge")

//    jarJar fg.deobf("com.gildedgames.nitrogen:nitrogen:${project.nitrogen_version}") {
//        jarJar.ranged(it, "[${project.nitrogen_version},)")
//        jarJar.pin(it, "${project.nitrogen_version}")
//    }

    // compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${project.crafttweaker_version}")

    //compileOnly fg.deobf("curse.maven:colytra-280200:${project.colytra_version}")
    //compileOnly fg.deobf("curse.maven:curious-elytra-317716:${project.curiouselytra_version}")

    //runtimeOnly fg.deobf("io.github.ultimateboomer:smoothboot-forge:${project.smoothboot_version}")

    //compileOnly fileTree(dir: 'libs', include: '*.jar')
    compileOnly "com.aetherteam.aether:aether:${project.aether_version}"
    runtimeOnly fg.deobf("com.aetherteam.aether:aether:${project.aether_version}")
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
//    maven githubPackage.invoke("Gilded-Games/Nitrogen")
}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "aetherbiomes",
                "Specification-Vendor"    : "aetherbiomessareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "aetherbiomessareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
